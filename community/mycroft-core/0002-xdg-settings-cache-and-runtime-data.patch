From 190fbebbf23aeb3dc5b28a90f4fc17c9a88a0564 Mon Sep 17 00:00:00 2001
From: Bart Ribbers <bribbers@disroot.org>
Date: Fri, 8 May 2020 21:32:33 +0200
Subject: [PATCH 1/3] Use XDG Base directories for settings, cache and runtime
 data

Improve deprecation warning message
---
 README.md                                   |  8 +--
 bin/mycroft-config                          |  6 +-
 mycroft/api/__init__.py                     | 17 ++----
 mycroft/client/enclosure/__main__.py        |  6 +-
 mycroft/client/enclosure/mark1/__init__.py  |  5 ++
 mycroft/client/speech/hotword_factory.py    | 33 ++++++++--
 mycroft/client/text/text_client.py          | 36 ++++++++++-
 mycroft/configuration/__init__.py           |  1 -
 mycroft/configuration/config.py             | 67 +++++++++++++++++----
 mycroft/configuration/locations.py          | 25 ++------
 mycroft/configuration/mycroft.conf          |  8 +--
 mycroft/filesystem/__init__.py              | 10 ++-
 mycroft/messagebus/send_func.py             |  7 +--
 mycroft/skills/event_scheduler.py           | 11 +++-
 mycroft/skills/skill_updater.py             |  6 +-
 mycroft/util/file_utils.py                  | 21 ++++---
 mycroft/util/log.py                         | 11 ++--
 test/unittests/skills/test_skill_updater.py |  6 +-
 test/unittests/util/commented.json          |  2 +-
 test/unittests/util/plain.json              |  2 +-
 20 files changed, 197 insertions(+), 91 deletions(-)

diff --git a/README.md b/README.md
index 01958ef2c73..82fcca33e7b 100644
--- a/README.md
+++ b/README.md
@@ -73,20 +73,20 @@ Mycroft is nothing without skills.  There are a handful of default skills that a
 
 ### Pairing Information
 Pairing information generated by registering with Home is stored in:
-`~/.mycroft/identity/identity2.json` <b><-- DO NOT SHARE THIS WITH OTHERS!</b>
+`~/.config/mycroft/identity/identity2.json` <b><-- DO NOT SHARE THIS WITH OTHERS!</b>
 
 ### Configuration
 Mycroft's configuration consists of 4 possible locations:
 - `mycroft-core/mycroft/configuration/mycroft.conf`(Defaults)
 - [Mycroft Home](https://home.mycroft.ai) (Remote)
-- `/etc/mycroft/mycroft.conf`(Machine)
-- `$HOME/.mycroft/mycroft.conf`(User)
+- `/etc/mycroft/mycroft.conf` (Machine)
+- `$XDG_CONFIG_DIR/mycroft/mycroft.conf` (which is by default `$HOME/.config/mycroft/mycroft.conf`) (USER)
 
 When the configuration loader starts, it looks in these locations in this order, and loads ALL configurations. Keys that exist in multiple configuration files will be overridden by the last file to contain the value. This process results in a minimal amount being written for a specific device and user, without modifying default distribution files.
 
 ### Using Mycroft Without Home
 
-If you do not wish to use the Mycroft Home service, before starting Mycroft for the first time, create `$HOME/.mycroft/mycroft.conf` with the following contents:
+If you do not wish to use the Mycroft Home service, before starting Mycroft for the first time, create `$HOME/.config/mycroft/mycroft.conf` with the following contents:
 
 ```
 {
diff --git a/bin/mycroft-config b/bin/mycroft-config
index a1271b328df..981f2c5d0c6 100755
--- a/bin/mycroft-config
+++ b/bin/mycroft-config
@@ -95,13 +95,13 @@ function validate_config_file() {
     return $result
 }
 
-_conf_file="~/.mycroft/mycroft.conf"
+_conf_file="~/.config/mycroft/mycroft.conf"
 function name_to_path() {
     case ${1} in
         "system")     _conf_file="/etc/mycroft/mycroft.conf" ;;
-        "user")       _conf_file=$(readlink -f ~/.mycroft/mycroft.conf) ;;
+        "user")       _conf_file=$(readlink -f ~/.config/mycroft/mycroft.conf) ;;
         "default")    _conf_file="$DIR/../mycroft/configuration/mycroft.conf" ;;
-        "remote")     _conf_file="/var/tmp/mycroft_web_cache.json" ;;
+        "remote")     _conf_file="$HOME/.cache/mycroft/web_cache.json" ;;
 
         *)
             echo "ERROR: Unknown name '${1}'."
diff --git a/mycroft/api/__init__.py b/mycroft/api/__init__.py
index 43663ee1270..d2843120ef4 100644
--- a/mycroft/api/__init__.py
+++ b/mycroft/api/__init__.py
@@ -20,8 +20,6 @@ import requests
 from requests import HTTPError, RequestException
 
 from mycroft.configuration import Configuration
-from mycroft.configuration.config import DEFAULT_CONFIG, SYSTEM_CONFIG, \
-    USER_CONFIG
 from mycroft.identity import IdentityManager, identity_lock
 from mycroft.version import VersionManager
 from mycroft.util import get_arch, connected, LOG
@@ -49,12 +47,9 @@ class Api:
     def __init__(self, path):
         self.path = path
 
-        # Load the config, skipping the REMOTE_CONFIG since we are
+        # Load the config, skipping the remote config since we are
         # getting the info needed to get to it!
-        config = Configuration.get([DEFAULT_CONFIG,
-                                    SYSTEM_CONFIG,
-                                    USER_CONFIG],
-                                   cache=False)
+        config = Configuration.get(cache=False, remote=False)
         config_server = config.get("server")
         self.url = config_server.get("url")
         self.version = config_server.get("version")
@@ -238,9 +233,7 @@ class DeviceApi(Api):
         platform_build = ""
 
         # load just the local configs to get platform info
-        config = Configuration.get([SYSTEM_CONFIG,
-                                    USER_CONFIG],
-                                   cache=False)
+        config = Configuration.get(cache=False, remote=False)
         if "enclosure" in config:
             platform = config.get("enclosure").get("platform", "unknown")
             platform_build = config.get("enclosure").get("platform_build", "")
@@ -262,9 +255,7 @@ class DeviceApi(Api):
         platform_build = ""
 
         # load just the local configs to get platform info
-        config = Configuration.get([SYSTEM_CONFIG,
-                                    USER_CONFIG],
-                                   cache=False)
+        config = Configuration.get(cache=False, remote=False)
         if "enclosure" in config:
             platform = config.get("enclosure").get("platform", "unknown")
             platform_build = config.get("enclosure").get("platform_build", "")
diff --git a/mycroft/client/enclosure/__main__.py b/mycroft/client/enclosure/__main__.py
index 7ff403f4175..074258e0d9b 100644
--- a/mycroft/client/enclosure/__main__.py
+++ b/mycroft/client/enclosure/__main__.py
@@ -17,7 +17,7 @@
 This provides any "enclosure" specific functionality, for example GUI or
 control over the Mark-1 Faceplate.
 """
-from mycroft.configuration import LocalConf, SYSTEM_CONFIG
+from mycroft.configuration import Configuration
 from mycroft.util.log import LOG
 from mycroft.util import wait_for_exit_signal, reset_sigint_handler
 
@@ -70,8 +70,8 @@ def main(ready_hook=on_ready, error_hook=on_error, stopping_hook=on_stopping):
     only the GUI bus will be started.
     """
     # Read the system configuration
-    system_config = LocalConf(SYSTEM_CONFIG)
-    platform = system_config.get("enclosure", {}).get("platform")
+    config = Configuration.get(remote=False)
+    platform = config.get("enclosure", {}).get("platform")
 
     enclosure = create_enclosure(platform)
     if enclosure:
diff --git a/mycroft/client/enclosure/mark1/__init__.py b/mycroft/client/enclosure/mark1/__init__.py
index 2741aa0eed1..2095945705d 100644
--- a/mycroft/client/enclosure/mark1/__init__.py
+++ b/mycroft/client/enclosure/mark1/__init__.py
@@ -15,8 +15,10 @@
 import subprocess
 import time
 import sys
+import os
 from alsaaudio import Mixer
 from threading import Thread, Timer
+from xdg import BaseDirectory
 
 import serial
 
@@ -164,6 +166,9 @@ class EnclosureReader(Thread):
         if "unit.factory-reset" in data:
             self.bus.emit(Message("speak", {
                 'utterance': mycroft.dialog.get("reset to factory defaults")}))
+            subprocess.call(
+                'rm ~/.config/mycroft/identity/identity2.json',
+                shell=True)
             subprocess.call(
                 'rm ~/.mycroft/identity/identity2.json',
                 shell=True)
diff --git a/mycroft/client/speech/hotword_factory.py b/mycroft/client/speech/hotword_factory.py
index e5385bf5ed8..8ee4fb1c4f6 100644
--- a/mycroft/client/speech/hotword_factory.py
+++ b/mycroft/client/speech/hotword_factory.py
@@ -26,13 +26,15 @@ import tempfile
 from threading import Timer, Thread
 from time import time, sleep
 from urllib.error import HTTPError
+from xdg import BaseDirectory
 
 from petact import install_package
 import requests
 
-from mycroft.configuration import Configuration, LocalConf, USER_CONFIG
-from mycroft.util.monotonic_event import MonotonicEvent
+from mycroft.configuration import Configuration, LocalConf
+from mycroft.configuration.locations import OLD_USER_CONFIG
 from mycroft.util.log import LOG
+from mycroft.util.monotonic_event import MonotonicEvent
 from mycroft.util.plugins import load_plugin
 
 RECOGNIZER_DIR = join(abspath(dirname(__file__)), "recognizer")
@@ -189,7 +191,27 @@ class PreciseHotword(HotWordEngine):
         from precise_runner import (
             PreciseRunner, PreciseEngine, ReadWriteStream
         )
-        local_conf = LocalConf(USER_CONFIG)
+
+        # We need to save to a writeable location, but the key we need
+        # might be stored in a different, unwriteable, location
+        # Make sure we pick the key we need from wherever it's located,
+        # but save to a writeable location only
+        local_conf = LocalConf(join(BaseDirectory.save_config_path('mycroft'),
+                                    'mycroft.conf'))
+
+        for dir in BaseDirectory.load_config_paths('mycroft'):
+            conf = LocalConf(join(dir, 'mycroft.conf'))
+            # If the current config contains the precise key use it,
+            # otherwise continue to the next file
+            if conf.get('precise', None) is not None:
+                local_conf['precise'] = conf.get('precise', None)
+                break
+
+        # If the key is not found yet, it might still exist on the old
+        # (deprecated) location
+        if local_conf.get('precise', None) is None:
+            local_conf = LocalConf(OLD_USER_CONFIG)
+
         if (local_conf.get('precise', {}).get('dist_url') ==
                 'http://bootstrap.mycroft.ai/artifacts/static/daily/'):
             del local_conf['precise']['dist_url']
@@ -247,7 +269,10 @@ class PreciseHotword(HotWordEngine):
 
     @property
     def folder(self):
-        return join(expanduser('~'), '.mycroft', 'precise')
+        old_path = join(expanduser('~'), '.mycroft', 'precise')
+        if os.path.isdir(old_path):
+            return old_path
+        return join(BaseDirectory.save_data_path('mycroft', 'precise'))
 
     @property
     def install_destination(self):
diff --git a/mycroft/client/text/text_client.py b/mycroft/client/text/text_client.py
index d39e8ccd0be..d223fe80969 100644
--- a/mycroft/client/text/text_client.py
+++ b/mycroft/client/text/text_client.py
@@ -15,6 +15,7 @@
 import sys
 import io
 from math import ceil
+from xdg import BaseDirectory
 
 from .gui_server import start_qml_gui
 
@@ -142,7 +143,7 @@ def handleNonAscii(text):
 ##############################################################################
 # Settings
 
-config_file = os.path.join(os.path.expanduser("~"), ".mycroft_cli.conf")
+filename = "mycroft_cli.conf"
 
 
 def load_mycroft_config(bus):
@@ -171,6 +172,35 @@ def load_settings():
     global max_log_lines
     global show_meter
 
+    config_file = None
+
+    # Old location
+    path = os.path.join(os.path.expanduser("~"), ".mycroft_cli.conf")
+    if os.path.isfile(path):
+        LOG.warning(" ===============================================")
+        LOG.warning(" ==             DEPRECATION WARNING           ==")
+        LOG.warning(" ===============================================")
+        LOG.warning(" You still have a config file at " +
+                    path)
+        LOG.warning(" Note that this location is deprecated and will" +
+                    " not be used in the future")
+        LOG.warning(" Please move it to " +
+                    os.path.join(BaseDirectory.save_config_path('mycroft'),
+                                 filename))
+        config_file = path
+
+    # Check XDG_CONFIG_DIR
+    if config_file is None:
+        for dir in BaseDirectory.load_config_paths('mycroft'):
+            file = os.path.join(dir, filename)
+            if os.path.isfile(file):
+                config_file = file
+                break
+
+    # Check /etc/mycroft
+    if config_file is None:
+        config_file = os.path.join("/etc/mycroft", filename)
+
     try:
         with io.open(config_file, 'r') as f:
             config = json.load(f)
@@ -196,6 +226,10 @@ def save_settings():
     config["show_last_key"] = show_last_key
     config["max_log_lines"] = max_log_lines
     config["show_meter"] = show_meter
+
+    config_file = os.path.join(
+        BaseDirectory.save_config_path("mycroft"), filename)
+
     with io.open(config_file, 'w') as f:
         f.write(str(json.dumps(config, ensure_ascii=False)))
 
diff --git a/mycroft/configuration/__init__.py b/mycroft/configuration/__init__.py
index c7981df3095..8f7d1a4ed60 100644
--- a/mycroft/configuration/__init__.py
+++ b/mycroft/configuration/__init__.py
@@ -14,4 +14,3 @@
 #
 from .config import Configuration, LocalConf, RemoteConf
 from .locale import set_default_lf_lang
-from .locations import SYSTEM_CONFIG, USER_CONFIG
diff --git a/mycroft/configuration/config.py b/mycroft/configuration/config.py
index 32af4d41bb8..b7304e48312 100644
--- a/mycroft/configuration/config.py
+++ b/mycroft/configuration/config.py
@@ -17,15 +17,15 @@
 import re
 import json
 import inflection
-from os.path import exists, isfile
+from os.path import exists, isfile, join, expanduser, dirname
 from requests import RequestException
+from xdg import BaseDirectory
 
+from .locations import DEFAULT_CONFIG, OLD_USER_CONFIG, USER_CONFIG
+from .locations import SYSTEM_CONFIG
 from mycroft.util.json_helper import load_commented_json, merge_dict
 from mycroft.util.log import LOG
 
-from .locations import (DEFAULT_CONFIG, SYSTEM_CONFIG, USER_CONFIG,
-                        WEB_CONFIG_CACHE)
-
 
 def is_remote_list(values):
     """Check if list corresponds to a backend formatted collection of dicts
@@ -127,7 +127,8 @@ class RemoteConf(LocalConf):
     def __init__(self, cache=None):
         super(RemoteConf, self).__init__(None)
 
-        cache = cache or WEB_CONFIG_CACHE
+        cache = cache or join(BaseDirectory.save_cache_path('mycroft'),
+                              'web_cache.json')
         from mycroft.api import is_paired
         if not is_paired():
             self.load_local(cache)
@@ -174,7 +175,7 @@ class Configuration:
     __patch = {}  # Patch config that skills can update to override config
 
     @staticmethod
-    def get(configs=None, cache=True):
+    def get(configs=None, cache=True, remote=True):
         """Get configuration
 
         Returns cached instance if available otherwise builds a new
@@ -183,6 +184,9 @@ class Configuration:
         Arguments:
             configs (list): List of configuration dicts
             cache (boolean): True if the result should be cached
+            remote (boolean): False if the Mycroft Home settings shouldn't
+                              be loaded
+
 
         Returns:
             (dict) configuration dictionary.
@@ -190,23 +194,62 @@ class Configuration:
         if Configuration.__config:
             return Configuration.__config
         else:
-            return Configuration.load_config_stack(configs, cache)
+            return Configuration.load_config_stack(configs, cache, remote)
 
     @staticmethod
-    def load_config_stack(configs=None, cache=False):
+    def load_config_stack(configs=None, cache=False, remote=True):
         """Load a stack of config dicts into a single dict
 
         Arguments:
             configs (list): list of dicts to load
             cache (boolean): True if result should be cached
-
+            remote (boolean): False if the Mycroft Home settings shouldn't
+                              be loaded
         Returns:
             (dict) merged dict of all configuration files
         """
         if not configs:
-            configs = [LocalConf(DEFAULT_CONFIG), RemoteConf(),
-                       LocalConf(SYSTEM_CONFIG), LocalConf(USER_CONFIG),
-                       Configuration.__patch]
+            configs = configs or []
+
+            # First use the patched config
+            configs.append(Configuration.__patch)
+
+            # Then use XDG config
+            # This includes both the user config and
+            # /etc/xdg/mycroft/mycroft.conf
+            for dir in BaseDirectory.load_config_paths('mycroft'):
+                configs.append(LocalConf(join(dir, 'mycroft.conf')))
+
+            # Then check the old user config
+            if isfile(OLD_USER_CONFIG):
+                LOG.warning(" ===============================================")
+                LOG.warning(" ==             DEPRECATION WARNING           ==")
+                LOG.warning(" ===============================================")
+                LOG.warning(" You still have a config file at " +
+                            OLD_USER_CONFIG)
+                LOG.warning(" Note that this location is deprecated and will" +
+                            " not be used in the future")
+                LOG.warning(" Please move it to " +
+                            BaseDirectory.save_config_path('mycroft'))
+                configs.append(LocalConf(OLD_USER_CONFIG))
+
+            # Then check the XDG user config
+            if isfile(USER_CONFIG):
+                configs.append(LocalConf(USER_CONFIG))
+
+            # Then use remote config
+            if remote:
+                configs.append(RemoteConf())
+
+            # Then use the system config (/etc/mycroft/mycroft.conf)
+            configs.append(LocalConf(SYSTEM_CONFIG))
+
+            # Then use the config that comes with the package
+            configs.append(LocalConf(DEFAULT_CONFIG))
+
+            # Make sure we reverse the array, as merge_dict will put every new
+            # file on top of the previous one
+            configs = reversed(configs)
         else:
             # Handle strings in stack
             for index, item in enumerate(configs):
diff --git a/mycroft/configuration/locations.py b/mycroft/configuration/locations.py
index cbbaab6ca94..eb8cfb18c76 100644
--- a/mycroft/configuration/locations.py
+++ b/mycroft/configuration/locations.py
@@ -13,26 +13,13 @@
 # limitations under the License.
 import os
 from os.path import join, dirname, expanduser, exists
+from xdg import BaseDirectory
 
 DEFAULT_CONFIG = join(dirname(__file__), 'mycroft.conf')
 SYSTEM_CONFIG = os.environ.get('MYCROFT_SYSTEM_CONFIG',
                                '/etc/mycroft/mycroft.conf')
-USER_CONFIG = join(expanduser('~'), '.mycroft/mycroft.conf')
-REMOTE_CONFIG = "mycroft.ai"
-WEB_CONFIG_CACHE = os.environ.get('MYCROFT_WEB_CACHE',
-                                  '/var/tmp/mycroft_web_cache.json')
-
-
-def __ensure_folder_exists(path):
-    """ Make sure the directory for the specified path exists.
-
-        Arguments:
-            path (str): path to config file
-     """
-    directory = dirname(path)
-    if not exists(directory):
-        os.makedirs(directory)
-
-
-__ensure_folder_exists(WEB_CONFIG_CACHE)
-__ensure_folder_exists(USER_CONFIG)
+# Make sure we support the old location still
+# Deprecated and will be removed eventually
+OLD_USER_CONFIG = join(expanduser('~'), '.mycroft/mycroft.conf')
+USER_CONFIG = join(BaseDirectory.save_config_path('mycroft'),
+                   'mycroft.conf')
diff --git a/mycroft/configuration/mycroft.conf b/mycroft/configuration/mycroft.conf
index b07fe137e3f..17bb75e4112 100644
--- a/mycroft/configuration/mycroft.conf
+++ b/mycroft/configuration/mycroft.conf
@@ -5,7 +5,7 @@
   // overridden at the REMOTE level (set by the user via
   // https://home.mycroft.ai), at the SYSTEM level (typically in the file
   // '/etc/mycroft/mycroft.conf'), or at the USER level (typically in the
-  // file '~/.mycroft/mycroft.conf').
+  // file '~/.config/mycroft/mycroft.conf').
   //
   // The load order of settings is:
   //   DEFAULT
@@ -107,7 +107,7 @@
     },
     "upload_skill_manifest": true,
     // Directory to look for user skills
-    "directory": "~/.mycroft/skills",
+    "directory": "~/.local/share/mycroft/skills",
     // Enable auto update by msm
     "auto_update": true,
     // blacklisted skills to not load
@@ -211,7 +211,7 @@
         "threshold": 1e-90,
         "lang": "en-us"
         // Specify custom model via:
-        // "local_model_file": "~/.mycroft/precise/models/something.pb"
+        // "local_model_file": "~/.local/share/mycroft/precise/models/something.pb"
         // Precise options:
         // "sensitivity": 0.5,  // Higher = more sensitive
         // "trigger_level": 3   // Higher = more delay & less sensitive
@@ -314,7 +314,7 @@
   },
 
   "padatious": {
-    "intent_cache": "~/.mycroft/intent_cache",
+    "intent_cache": "~/.local/share/mycroft/intent_cache",
     "train_delay": 4,
     "single_thread": false
   },
diff --git a/mycroft/filesystem/__init__.py b/mycroft/filesystem/__init__.py
index b8804241585..21b12e8f9a5 100644
--- a/mycroft/filesystem/__init__.py
+++ b/mycroft/filesystem/__init__.py
@@ -13,7 +13,9 @@
 # limitations under the License.
 #
 import os
+import shutil
 from os.path import join, expanduser, isdir
+from xdg import BaseDirectory
 
 
 class FileSystemAccess:
@@ -31,7 +33,13 @@ class FileSystemAccess:
     def __init_path(path):
         if not isinstance(path, str) or len(path) == 0:
             raise ValueError("path must be initialized as a non empty string")
-        path = join(expanduser('~'), '.mycroft', path)
+
+        old_path = join(expanduser('~'), '.mycroft', path)
+        path = join(BaseDirectory.save_config_path('mycroft'), path)
+
+        # Migrate from the old location if it still exists
+        if isdir(old_path):
+            shutil.move(old_path, path)
 
         if not isdir(path):
             os.makedirs(path)
diff --git a/mycroft/messagebus/send_func.py b/mycroft/messagebus/send_func.py
index 403db9f45c1..a11a9b0a591 100644
--- a/mycroft/messagebus/send_func.py
+++ b/mycroft/messagebus/send_func.py
@@ -15,8 +15,6 @@
 from websocket import create_connection
 
 from mycroft.configuration import Configuration
-from mycroft.configuration.locations import (DEFAULT_CONFIG, SYSTEM_CONFIG,
-                                             USER_CONFIG)
 from mycroft.messagebus.client import MessageBusClient
 from mycroft.messagebus.message import Message
 
@@ -32,10 +30,7 @@ def send(message_to_send, data_to_send=None):
     data_to_send = data_to_send or {}
 
     # Calculate the standard Mycroft messagebus websocket address
-    config = Configuration.get([DEFAULT_CONFIG,
-                                SYSTEM_CONFIG,
-                                USER_CONFIG],
-                               cache=False)
+    config = Configuration.get(cache=False, remote=False)
     config = config.get("websocket")
     url = MessageBusClient.build_url(
         config.get("host"),
diff --git a/mycroft/skills/event_scheduler.py b/mycroft/skills/event_scheduler.py
index fe41ac1bedc..f9931a7ea13 100644
--- a/mycroft/skills/event_scheduler.py
+++ b/mycroft/skills/event_scheduler.py
@@ -16,10 +16,12 @@
 times.
 """
 import json
+import shutil
 import time
 from datetime import datetime, timedelta
 from threading import Thread, Lock
 from os.path import isfile, join, expanduser
+from xdg import BaseDirectory
 
 from mycroft.configuration import Configuration
 from mycroft.messagebus.message import Message
@@ -54,14 +56,19 @@ class EventScheduler(Thread):
     """
     def __init__(self, bus, schedule_file='schedule.json'):
         super().__init__()
-        data_dir = expanduser(Configuration.get()['data_dir'])
 
         self.events = {}
         self.event_lock = Lock()
 
         self.bus = bus
         self.is_running = True
-        self.schedule_file = join(data_dir, schedule_file)
+        old_schedule_path = join(expanduser(Configuration.get()['data_dir']),
+                                 schedule_file)
+        new_schedule_path = join(
+                BaseDirectory.load_first_config('mycroft'), schedule_file)
+        if isfile(old_schedule_path):
+            shutil.move(old_schedule_path, new_schedule_path)
+        self.schedule_file = new_schedule_path
         if self.schedule_file:
             self.load()
 
diff --git a/mycroft/skills/skill_updater.py b/mycroft/skills/skill_updater.py
index b856739a1cb..013411ce50e 100644
--- a/mycroft/skills/skill_updater.py
+++ b/mycroft/skills/skill_updater.py
@@ -17,6 +17,7 @@ import os
 import sys
 from datetime import datetime
 from time import time
+from xdg import BaseDirectory
 
 from msm import MsmException
 
@@ -97,9 +98,8 @@ class SkillUpdater:
                     '.mycroft-skills'
                 )
             else:
-                self._installed_skills_file_path = os.path.expanduser(
-                    '~/.mycroft/.mycroft-skills'
-                )
+                self._installed_skills_file_path = os.path.join(
+                    BaseDirectory.save_data_path('mycroft'), '.mycroft-skills')
 
         return self._installed_skills_file_path
 
diff --git a/mycroft/util/file_utils.py b/mycroft/util/file_utils.py
index 120c2215c3b..20290673f7b 100644
--- a/mycroft/util/file_utils.py
+++ b/mycroft/util/file_utils.py
@@ -22,6 +22,7 @@ import os
 import psutil
 from stat import S_ISREG, ST_MTIME, ST_MODE, ST_SIZE
 import tempfile
+from xdg import BaseDirectory
 
 import mycroft.configuration
 from .log import LOG
@@ -33,15 +34,15 @@ def resolve_resource_file(res_name):
     Resource names are in the form: 'filename.ext'
     or 'path/filename.ext'
 
-    The system wil look for ~/.mycroft/res_name first, and
-    if not found will look at /opt/mycroft/res_name,
-    then finally it will look for res_name in the 'mycroft/res'
-    folder of the source code package.
+    The system wil look for $XDG_DATA_DIRS/mycroft/res_name first
+    (defaults to ~/.local/share/mycroft/res_name), and if not found will
+    look at /opt/mycroft/res_name, then finally it will look for res_name
+    in the 'mycroft/res' folder of the source code package.
 
     Example:
     With mycroft running as the user 'bob', if you called
         resolve_resource_file('snd/beep.wav')
-    it would return either '/home/bob/.mycroft/snd/beep.wav' or
+    it would return either '/home/bob/.local/share/mycroft/snd/beep.wav' or
     '/opt/mycroft/snd/beep.wav' or '.../mycroft/res/snd/beep.wav',
     where the '...' is replaced by the path where the package has
     been installed.
@@ -57,8 +58,14 @@ def resolve_resource_file(res_name):
     if os.path.isfile(res_name):
         return res_name
 
-    # Now look for ~/.mycroft/res_name (in user folder)
-    filename = os.path.expanduser("~/.mycroft/" + res_name)
+    # Now look for XDG_DATA_DIRS
+    for dir in BaseDirectory.load_data_paths('mycroft'):
+        filename = os.path.join(dir, res_name)
+        if os.path.isfile(filename):
+            return filename
+
+    # Now look in the old user location
+    filename = os.path.join(os.path.expanduser('~'), '.mycroft', res_name)
     if os.path.isfile(filename):
         return filename
 
diff --git a/mycroft/util/log.py b/mycroft/util/log.py
index 0ea391f8f79..788f6df1c37 100644
--- a/mycroft/util/log.py
+++ b/mycroft/util/log.py
@@ -21,7 +21,7 @@ This module provides the LOG pseudo function quickly creating a logger instance
 for use.
 
 The default log level of the logger created here can ONLY be set in
-/etc/mycroft/mycroft.conf or ~/.mycroft/mycroft.conf
+/etc/mycroft/mycroft.conf or ~/.config/mycroft/mycroft.conf
 
 The default log level can also be programatically be changed by setting the
 LOG.level parameter.
@@ -31,10 +31,10 @@ import inspect
 import logging
 import sys
 
-from os.path import isfile
+from os.path import isfile, join
+from xdg import BaseDirectory
 
 from mycroft.util.json_helper import load_commented_json, merge_dict
-from mycroft.configuration.locations import SYSTEM_CONFIG, USER_CONFIG
 
 
 def getLogger(name="MYCROFT"):
@@ -84,7 +84,10 @@ class LOG:
         # Check configs manually, the Mycroft configuration system can't be
         # used since it uses the LOG system and would cause horrible cyclic
         # dependencies.
-        confs = [SYSTEM_CONFIG, USER_CONFIG]
+        confs = []
+        for dir in BaseDirectory.load_config_paths('mycroft'):
+            confs.append(join(dir, 'mycroft.conf'))
+        confs.append('/etc/mycroft/mycroft.conf')
         config = {}
         for conf in confs:
             try:
diff --git a/test/unittests/skills/test_skill_updater.py b/test/unittests/skills/test_skill_updater.py
index 38d4083d7f2..d7cc72e3e67 100644
--- a/test/unittests/skills/test_skill_updater.py
+++ b/test/unittests/skills/test_skill_updater.py
@@ -13,8 +13,9 @@
 # limitations under the License.
 #
 """Unit tests for the SkillUpdater class."""
-from os import path
+import os
 from time import sleep
+from xdg import BaseDirectory
 from unittest.mock import Mock, patch, PropertyMock
 
 from mycroft.skills.skill_updater import SkillUpdater
@@ -143,7 +144,8 @@ class TestSkillUpdater(MycroftUnitTestBase):
             os_patch.return_value = False
             updater = SkillUpdater(self.message_bus_mock)
             self.assertEqual(
-                path.expanduser('~/.mycroft/.mycroft-skills'),
+                os.path.join(BaseDirectory.save_data_path('mycroft'),
+                             '.mycroft-skills'),
                 updater.installed_skills_file_path
             )
 
diff --git a/test/unittests/util/commented.json b/test/unittests/util/commented.json
index 87c7d3e2c2d..00a581f6df4 100644
--- a/test/unittests/util/commented.json
+++ b/test/unittests/util/commented.json
@@ -54,7 +54,7 @@
     }
   },
   "skills": {
-    "directory": "~/.mycroft/skills"
+    "directory": "~/.local/share/mycroft/skills"
   },
   "server": {
     "url": "https://api.mycroft.ai",
diff --git a/test/unittests/util/plain.json b/test/unittests/util/plain.json
index f8c474139ce..eec84631d88 100644
--- a/test/unittests/util/plain.json
+++ b/test/unittests/util/plain.json
@@ -36,7 +36,7 @@
     }
   },
   "skills": {
-    "directory": "~/.mycroft/skills"
+    "directory": "~/.local/share/mycroft/skills"
   },
   "server": {
     "url": "https://api.mycroft.ai",
-- 
2.32.0

From 508586cf090c9e6296fe8c03595b582822beea85 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=85ke=20Forslund?= <ake.forslund@gmail.com>
Date: Sun, 21 Feb 2021 18:08:46 +0100
Subject: [PATCH 2/3] Restore system locations to mycroft.configuration

Fixes issue with Timer skill
---
 mycroft/configuration/__init__.py | 1 +
 1 file changed, 1 insertion(+)

diff --git a/mycroft/configuration/__init__.py b/mycroft/configuration/__init__.py
index 8f7d1a4ed60..c7981df3095 100644
--- a/mycroft/configuration/__init__.py
+++ b/mycroft/configuration/__init__.py
@@ -14,3 +14,4 @@
 #
 from .config import Configuration, LocalConf, RemoteConf
 from .locale import set_default_lf_lang
+from .locations import SYSTEM_CONFIG, USER_CONFIG
-- 
2.32.0

From e3516e0f86d2b4f46532b1cfa55ae014f91136fc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=85ke=20Forslund?= <ake.forslund@gmail.com>
Date: Wed, 5 May 2021 20:32:19 +0200
Subject: [PATCH 3/3] Correct resolution order for resolving log configs

---
 mycroft/util/log.py | 1 +
 1 file changed, 1 insertion(+)

diff --git a/mycroft/util/log.py b/mycroft/util/log.py
index 788f6df1c37..460b349d889 100644
--- a/mycroft/util/log.py
+++ b/mycroft/util/log.py
@@ -88,6 +88,7 @@ class LOG:
         for dir in BaseDirectory.load_config_paths('mycroft'):
             confs.append(join(dir, 'mycroft.conf'))
         confs.append('/etc/mycroft/mycroft.conf')
+        confs = reversed(confs)
         config = {}
         for conf in confs:
             try:
-- 
2.32.0

